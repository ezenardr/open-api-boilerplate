openapi: 3.0.3
info:
  version: 1.0.0
  title: User Authentication - OpenAPI 3.0
  description: >-
    This is a sample User authentication api Server based on the OpenAPI 3.0
    specification.

    This was done under supervision of HNG mentors at HNG11 internship. 

    You can now help us improve the API whether it's by making changes to the
    definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of
    the new features in OAS3.
  contact:
    email: ezenardr.dev@gmail.com
servers:
  - url: https://mwk8cgk.api.ezenardr.dev
tags:
  - name: user
    description: Operations about user
paths:
  /api/auth/register:
    post:
      tags:
        - user
      summary: Create user
      description: This can be done by anyone that want to create an account
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccesfull'
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUnsuccesful'
  /api/auth/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccesfull'
        '401':
          description: unsuccesfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUnsuccesfull'
  /api/auth/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      security:
        - access_token: []
      responses:
        default:
          description: successful operation
  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserByName
      security:
        - access_token: []
      parameters:
        - name: userId
          in: path
          description: The Id of the user that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFound'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFound'
components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
    UserSuccesfull:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Registration successfull
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: >-
                oat_MzY.X3RwX0ZtQXI1QWNiX1pZMlFidnR1MkVsR3l3bTN3SW5ZcDdNX3JFWjE2OTIyOTEwMTE
            user:
              type: object
              properties:
                userId:
                  type: string
                  example: 48196700-bfd0-4ba4-918e-8df2eeb2ce6d
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                phone:
                  type: string
    UserUnsuccesful:
      type: object
      properties:
        status:
          type: string
          example: Bad resquest
        message:
          type: string
          example: Registration unsuccessful
        statusCode:
          type: string
          example: 400
    Login:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
    LoginSuccesfull:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Login successfull
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: >-
                oat_MzY.X3RwX0ZtQXI1QWNiX1pZMlFidnR1MkVsR3l3bTN3SW5ZcDdNX3JFWjE2OTIyOTEwMTE
            user:
              type: object
              properties:
                userId:
                  type: string
                  example: 48196700-bfd0-4ba4-918e-8df2eeb2ce6d
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                phone:
                  type: string
    LoginUnsuccesfull:
      type: object
      properties:
        status:
          type: string
          example: Bad request
        message:
          type: string
          example: Authentification failed
        statusCode:
          type: string
          example: 401
    UserFound:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: User found
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: >-
                oat_MzY.X3RwX0ZtQXI1QWNiX1pZMlFidnR1MkVsR3l3bTN3SW5ZcDdNX3JFWjE2OTIyOTEwMTE
            user:
              type: object
              properties:
                userId:
                  type: string
                  example: 48196700-bfd0-4ba4-918e-8df2eeb2ce6d
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                phone:
                  type: string
    UserNotFound:
      type: object
      properties:
        status:
          type: string
          example: Bad request
        message:
          type: string
          example: User not found
        statusCode:
          type: string
          example: 404
    Unauthorized:
      type: object
      properties:
        errors:
          type: string
          example: Unauthorized access
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    access_token:
      type: apiKey
      name: access_token
      in: header
